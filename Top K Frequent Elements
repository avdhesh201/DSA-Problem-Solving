Leetcode 347 : Top K Frequent Elements

 vector<int> topKFrequent(vector<int>& nums, int k) {
        unordered_map<int,int> umap;
        vector<vector<int>> freq(nums.size()+1);
        vector<int> ans;
        int count=0;
        for(int i=0; i<nums.size(); i++){
            umap[nums[i]]++;
        }
       // for dry run of map , help in understanding 
       for(auto v:umap){
           cout<< v.first;
           cout<<"---";
           cout<< v.second;
           cout<<endl;
        }

        for(auto e:umap){
            freq[e.second].push_back(e.first);    // freq mei umap se key daal rhe h , e is the key value pair 
        }
    //    0      1        2     3
    //   []     [3]      [2]    [1]      freq array h 

        for(int i=nums.size(); i>0; i--){  // top k elemnents ko nikal rhe h freq se 
        
            if(freq[i].size()!=0){
                for(int j=0; j<freq[i].size(); j++){
                    ans.push_back(freq[i][j]);
                    cout<<freq[i][j];
                    count++;
                   
                }
            }
            if(count==k) break;
        }
        return ans;
    }



-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

 vector<int> topKFrequent(vector<int>& nums, int k) {
        unordered_map<int,int> count;
        priority_queue<pair<int, int> , vector<pair<int,int>>,  greater<pair<int, int>>> min_heap;  // min heap , storing pair of int , int 
        for(auto i :nums) count[i]++; // storing count in the map count
        for(auto & i :count){// pushing in min heap the pair ( i is the pair) the count and the element , second is the count and first is element 
            min_heap.push({i.second, i.first});//onwards,1st is count ans 2nd is element as it sorts on the  first ele
            if(min_heap.size()>k) min_heap.pop();
        }
        vector<int >res;
        while(k--){  //   pop the second element from the miin heap and storing in the res vector  as ans is vector only
            res.push_back(min_heap.top().second); 
            min_heap.pop();
        }
        return res;
    }


